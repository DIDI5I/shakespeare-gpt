# -*- coding: utf-8 -*-
"""Project_ReplicationWithDeepStudyLittle_Shakespear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c52fzUhINMYZQyk45KmD676m4WKL3SgQ
"""

!nvidia-smi
import torch
import torch.nn as nn
from torch.nn import functional as F
max_iters = 3000
eval_interval = 300
eval_iters = 200
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
batch_size = 32
torch.manual_seed(1337)
embd_size = 32
dropout = 0.2

!wget = "https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt"

with open('input.txt','r', encoding='utf-8') as file:
  text = file.read()

print(text[:1000])



# right now i want to start working on the tokenization
# so i want it on a character level
# separate out the unique cxharacters
# then i want to create a dictionary that maps characters to ints and vise versa to create encoder decoderder

# to dra out unique characters
chars = sorted(list(set(text)))
print(chars)
vocab_size = len(chars)
print(vocab_size)

# i want to create the characters
char_to_num = {c:i for i, c in enumerate(chars)}
num_to_char = {i:c for i, c in enumerate(chars)}

encode = lambda s: [char_to_num[char] for char in s]
decode = lambda i: ''.join([ num_to_char[digit] for digit in i])
"""
def encoding(sentence):
  value = []
  for char in sentence:
    try:
     val = [char_to_num[char]]
     value = value + val
    except KeyError:
      continue
  return value

def decoding(e_sentence):
  sentence = []
  for num in e_sentence:
    try:
      sentence.append(num_to_char[num])
    except KeyError:
      continue
  return ''.join(sentence)
"""



"""first_try = encoding('hello HEHEG jhhzs  ,,, ........ banda there buddy')
print(first_try)

first_try = decoding(first_try)
print(first_try)
"""

# now i want to create batches and block sizes to remain optimal
# we can run 4 parallel batches of a block size of 8 for a start

!pip install torch torchvision torchaudio

data = torch.tensor(encode(text))
data
n = int(0.9*len(text))
train_dataset = text[: n]
test_dataset = text[n:]

n = int(0.9*len(data))
train_dataset = data[: n]
test_dataset = data[n:]
train_dataset[:10]
train_dataset.shape

# i want to now make predictionsz about tokens or rather learn when i have a token look at the token preceeding in my set
# this calls for a method to isolate a batch and then a block then get a target and a context

# target context code
batch_size = 4
block_size = 8
context = []
for i in range(batch_size):
  capture = train_dataset[i*(block_size):((i*block_size) + block_size)]
  print(f'Current block is {capture}')
  for j in range(block_size-1):
    context = capture[:j+1]
    target = capture[j+1]
    print(f'For the context of {context}')
    print(f'The target is {target}')

torch.manual_seed(1337)

batch_size = 4
block_size = 8

def get_batch(sticky_note):
  if sticky_note == 'train':
    data = train_dataset
  elif sticky_note == 'test':
    data = test_dataset

  rand_point = torch.randint(len(data) - block_size,(batch_size,))
  x = torch.stack([data[point: (point + block_size)] for point in rand_point])
  y = torch.stack([data[point + 1: ((point + block_size) + 1)] for point in rand_point])
  x, y = x.to(device), y.to(device)
  return x, y

context, target = get_batch('test')

print(f'this is x {context}')
print(f'this is y {target}')

# now we get to the fun part the nn yay!

class Head(nn.Module):
  def __init__(self, head_size):
    super().__init__()
    self.key = nn.Linear(embd_size, head_size, bias=False)
    self.query = nn.Linear(embd_size, head_size, bias=False)
    self.value = nn.Linear(embd_size, head_size, bias=False)
    self.register_buffer('tril', torch.tril(torch.ones(block_size,block_size)))
    self.head_size = head_size
    self.dropout = nn.Dropout(dropout)


  def forward(self, context):
    B, T, C = context.shape

    # attention(Q,K,V) = softmax((Q*Kt)/sqrt*head_size)
    wei = ((self.query(context) @ self.key(context).transpose(-2, -1)) / self.head_size**0.5)
    wei = wei.masked_fill(self.tril[:T,:T] == 0, float('-inf'))
    wei = F.softmax(wei, dim=-1)
    wei = self.dropout(wei)
    out = wei @ self.value(context)
    return out

class MultipleAttention(nn.Module):
  def __init__(self, num_heads, head_sizes):
    super().__init__()
    self.heads = nn.ModuleList([Head(head_sizes) for _ in range(num_heads)])
    self.proj = nn.Linear(embd_size, embd_size)
    self.dropout = nn.Dropout(dropout)

  def forward(self, context):
    out = torch.cat([h(context) for h in self.heads], dim=-1)
    out = self.dropout(self.proj(out))
    return out

class FeedForward(nn.Module):
  def __init__(self, embd_size):
    super().__init__()
    self.net = nn.Sequential(
        nn.Linear(embd_size, 4*embd_size),
        nn.ReLU(),
        nn.Linear(4*embd_size, embd_size),
        nn.Dropout(dropout)
    )

  def forward(self, context):
    return self.net(context)

class Blocks(nn.Module):
  def __init__(self, embd_size, num_heads):
    super().__init__()
    head_size = embd_size // num_heads
    self.sa = MultipleAttention(num_heads, head_size)
    self.ffwd = FeedForward(embd_size)
    self.ln1 = nn.LayerNorm(embd_size)
    self.ln2 = nn.LayerNorm(embd_size)

  def forward(self, context):
    context = context + self.sa(self.ln1(context))
    context = context + self.ffwd(self.ln2(context))
    return context

class BigramLanguageModule(nn.Module):
  def __init__(self, vocab_size):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size, embd_size)
    self.position_embedding_table = nn.Embedding(block_size, embd_size)
    self.lm_head = nn.Linear(embd_size, vocab_size)
    self.blocks = nn.Sequential(
        Blocks(embd_size, num_heads=4),
        Blocks(embd_size, num_heads=4),
        Blocks(embd_size, num_heads=4),
        Blocks(embd_size, num_heads=4),
        nn.LayerNorm(embd_size)
        )

  def forward(self, context, target=None):
    B, T = context.shape

    tok_embd = self.token_embedding_table(context)
    pos_embd = self.position_embedding_table(torch.arange(T, device=device))
    logits_embd = tok_embd + pos_embd
    logits_embd = self.blocks(logits_embd)

    logits = self.lm_head(logits_embd)

    if target == None:
      loss = None
    else:
      B, T, C = logits.shape
      logits = logits.view(B*T, C)
      target = target.view(B*T)
      #assert target.max() < C, f"Target {target.max()} out of range for V={C}"
      loss = F.cross_entropy(logits, target)
    return logits, loss
  def generate(self, context, max_new_tokens):
    for i in range(max_new_tokens):
      context_range = context[:, -block_size:]
      logits, loss = self(context_range)
      logits = logits[:, -1,:]
      probab = F.softmax(logits, dim= -1)
      context_next = torch.multinomial(probab, num_samples=1)
      context = torch.cat((context, context_next), dim=1)
    return context

m = BigramLanguageModule(vocab_size)
m = m.to(device)
for i in range(1):
  x, y = get_batch('test')
  logits, loss = m(x, y)
  print(f'The loss is {loss}')
  print(f'The loss is {logits.shape}')


print(decode(m.generate(torch.zeros((1, 1), dtype=torch.long, device=device) , max_new_tokens=100)[0].tolist()))

"""Now we train our nn"""

@torch.no_grad()
def estimate_loss():
  out = {}
  m.eval()
  for split in ['train', 'test']:
    losses = torch.zeros(eval_iters)
    for k in range(eval_iters):
        X, Y  = get_batch(split)
        logits, loss = m(X, Y)
        losses[k] = loss.item()
    out[split] = losses.mean()
  m.train()
  return out

optimizer = torch.optim.AdamW(m.parameters(), lr=1e-3)

for _ in range(20000):
  context, target = get_batch('train')
  logits, loss = m(context, target)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()

for iter in range(max_iters):
  if iter % eval_interval == 0:
    losses = estimate_loss()
    print(f'step {iter}: train losses {losses['train']:.4f}')
    print(f'step {iter}: test losses {losses['test']:.4f}')



print(decode(m.generate(torch.tensor(encode('My very old mother')), dtype=torch.long, device=device) , max_new_tokens=1000)[0].tolist()))

#We will work to try and give contextual meaning to our nn
#with the probabilities now depending on history of taget token and not just immediately proceeding
# 1 version

# attention mechanism for a single head
torch.manual_seed(1337)
B, C, T = 4, 32, 8
x = torch.randn(B,T,C)
head_size = 16
key = nn.Linear(C, head_size, bias=False)
query = nn.Linear(C, head_size, bias=False)
value = nn.Linear(C, head_size, bias=False)
wei = query(x) @ key(x).transpose(-2, -1)


tril = torch.tril(torch.ones(T, T))
#wei = torch.zeros((T,T))
wei = wei.masked_fill(tril == 0, float('-inf'))
wei = F.softmax(wei,dim=-1)
v = value(x)
out = wei @ v
wei
out.shape

